'use strict';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */


var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var cubicBezierDefault = {
    x1: 0,
    y1: 0,
    x2: 1,
    y2: 1
};
function transformCubicBezier(point) {
    if (point === void 0) { point = cubicBezierDefault; }
    var controlPoint = __assign(__assign({}, cubicBezierDefault), point);
    return "cubic-bezier(".concat(controlPoint.x1, ", ").concat(controlPoint.y1, ", ").concat(controlPoint.x2, ", ").concat(controlPoint.y2, ")");
}
function walkNode(nodes, cb) {
    if (!("length" in nodes)) {
        nodes = [nodes];
    }
    nodes = nodes.slice();
    while (nodes.length) {
        var node = nodes.shift();
        var shouldBreak = cb(node);
        if (shouldBreak)
            return;
        if (node.childNodes && node.childNodes.length) {
            nodes = Array.from(node.childNodes).slice().concat(nodes);
        }
    }
}

var defaultScrollConfig = {
    stageSwitchTransition: 800,
    stageSwitchDelay: 0,
    stageSwitchEasing: transformCubicBezier(),
    disableAfterSwitching: 500,
    stages: []
};
var defaultStageConfig = {
    id: "",
    scrollNumber: 1,
    transition: 200,
    easing: "ease",
    items: []
};

var Scroll = (function () {
    function Scroll(target, config) {
        if (typeof target === "string") {
            target = document.querySelector(target);
        }
        if (!target || target.nodeType !== 1) ;
        if (!config.stages.length) {
            throw new Error("Cannot find any stage to apply scroll effects, stages is required !");
        }
        this.target = target;
        this.animating = false;
        this.switching = false;
        this.activeStageIndex = 0;
        this.initConfig(config);
    }
    Scroll.prototype.initConfig = function (config) {
        config = __assign(__assign({}, defaultScrollConfig), config);
        this.config = config;
        this.initStages();
    };
    Scroll.prototype.initStages = function () {
        var _this = this;
        walkNode([this.target], function (node) {
            if (node.nodeType !== 1)
                return;
            var stage;
            var stageId = node.getAttribute("data-scroll-stage-id");
            if (stageId && (stage = _this.getStage(stageId))) {
                node.style.transition = "".concat(_this.config.stageSwitchTransition, "ms ").concat(_this.config.stageSwitchEasing, " ").concat(_this.config.stageSwitchDelay, "ms");
                (_this.stages || (_this.stages = [])) && _this.stages.push({
                    node: node,
                    stageConfig: __assign(__assign({}, defaultStageConfig), stage),
                    id: stageId,
                    step: 0
                });
                return false;
            }
        });
        this.initItemsEffects();
    };
    Scroll.prototype.initItemsEffects = function () {
        var _this = this;
        this.stages.forEach(function (stage) {
            walkNode(stage.node, function (node) {
                if (node.nodeType !== 1)
                    return;
                var itemId = node.getAttribute("data-scroll-item-id");
                if (itemId) {
                    for (var i = 0; i < _this.config.stages.length; i++) {
                        for (var j = 0; j < _this.config.stages[i].items.length; j++) {
                            var item = _this.config.stages[i].items[j];
                            if (item.id = itemId) {
                                if (!stage.items) {
                                    stage.items = [];
                                }
                                stage.items.push(__assign(__assign({}, _this.config.stages[i].items[j]), { node: node }));
                                break;
                            }
                        }
                    }
                }
                return false;
            });
        });
    };
    Scroll.prototype.getStage = function (id) {
        var stageConfig = this.config.stages;
        for (var i = 0; i < stageConfig.length; i++) {
            var stage = stageConfig[i];
            if (stage.id === id) {
                return stage;
            }
        }
    };
    return Scroll;
}());

new Scroll("#wrap", {
    stages: [
        {
            "id": "color",
            "transition": 200,
            "items": [{
                    "id": "battery",
                    "effects": [{
                            "property": "width",
                            "start": "125px",
                            "end": "250px"
                        }, {
                            "property": "backgroundColor",
                            "start": "#fd0",
                            "end": "#209b35"
                        }]
                },
                {
                    "id": "text",
                    "effects": [{
                            "property": "color",
                            "start": "#fd0",
                            "end": "#209b35"
                        }]
                }]
        }
    ]
});
//# sourceMappingURL=demo.min.js.map
